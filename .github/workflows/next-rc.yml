name: Prepare next release candidate

on:
  push:
    branches:
      - release/*
env:
  GIT_USER: github-actions[bot]
  GIT_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
  HELM_DOCS_VERSION: 1.11.0

jobs:
  next-rc:
    if: ${{ !contains(github.event.commits[0].message, '[skip-ci]') }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Set git 'user.name' and 'user.email'
        run: |
          git config user.name "${{ env.GIT_USER }}"
          git config user.email ${{ env.GIT_EMAIL }}

      - name: Prepare the next release candidate
        id: next-rc
        run: |
          COMMIT_MSG=$(git show -s --format=%s)
          CURRENT_BRANCH=$(git branch --show-current)
          BASE_TAG=$(echo ${CURRENT_BRANCH##*/})
          REMOTE_TAG=$(git ls-remote --tags origin $BASE_TAG)
          if [ -n "$REMOTE_TAG" ]; then
              echo "${BASE_TAG} is already in remote, exiting..."
              exit 1
          fi
          
          LATEST_RELEASE_TAG=$(git ls-remote --tags origin | grep "refs/tags/${BASE_TAG}" | grep -v "\^{}" | awk -F \. '{print $4}' | sort -nr | head -1)
          NEW_RELEASE_REVISION=$(( $LATEST_RELEASE_TAG + 1 ))
          NEW_RELEASE_VERSION="${BASE_TAG}-rc.${NEW_RELEASE_REVISION}"
          echo "Latest release-candidate tag found: ${BASE_TAG}-rc.${LATEST_RELEASE_TAG}, creating: ${BASE_TAG}-rc.${NEW_RELEASE_REVISION}"

          echo ::set-output name=release-version::$BASE_TAG
          echo ::set-output name=new-rc-version::$NEW_RELEASE_VERSION
          echo ::set-output name=commit-msg::$COMMIT_MSG
          echo ::set-output name=branch::$CURRENT_BRANCH

      - name: Update Chart Version in YAML Files
        run: |
          HELM_FOLDER=$(echo "${{ github.workspace }}/helm")
          CHART_CURRENT_VERSION=$(sed -nE 's/^version\s*:\s*([^\s\/]*).*/\1/p' ${HELM_FOLDER}/botkube/Chart.yaml)
          find ${HELM_FOLDER} -name "*.yaml" -exec sed -i "s/${CHART_CURRENT_VERSION}/${{ steps.next-rc.outputs.new-rc-version }}/g" {} +

      - name: Install helm-docs
        run: |
          cd /tmp
          wget https://github.com/norwoodj/helm-docs/releases/download/v${{env.HELM_DOCS_VERSION}}/helm-docs_${{env.HELM_DOCS_VERSION}}_Linux_x86_64.tar.gz
          tar -xvf helm-docs_${{env.HELM_DOCS_VERSION}}_Linux_x86_64.tar.gz
          sudo mv helm-docs /usr/local/sbin

      - name: Process Helm Docs
        working-directory: ${{ github.workspace }}/helm/botkube
        run: |
          helm-docs -l debug -f ./values.yaml -t ./README.tpl.md --sort-values-order file

      - name: Tag & Push the next release candidate
        run: |
          if [[ $(git diff --stat) != '' ]]; then
            git commit -am "[skip-ci] Helm chart update for ${{ steps.next-rc.outputs.new-rc-version }}"
            git push origin ${{ steps.next-rc.outputs.branch }}
          fi
          git tag -a ${{ steps.next-rc.outputs.new-rc-version }} -m "${{ steps.next-rc.outputs.new-rc-version }}"
          git push --tags

      - name: Create a pull request
        if: ${{ !endsWith(steps.next-rc.outputs.new-rc-version, 'rc.1') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git checkout -b backport/${{ steps.next-rc.outputs.new-rc-version }}
          git push origin backport/${{ steps.next-rc.outputs.new-rc-version }}

          gh pr create \
            --title "${{ steps.next-rc.outputs.commit-msg }} [backport of: ${{ steps.next-rc.outputs.new-rc-version }}"]  \
             --head "backport/${{ steps.next-rc.outputs.new-rc-version }}" \
             --base main \
             --label release-automation \
             --body "This Pull Request is created by release automation to backport a task to main branch. Feel free to review and merge it."